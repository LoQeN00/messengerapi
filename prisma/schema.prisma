// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  groupsMember  GroupMember[]
  messages      Message[]
  friends       Friend[]
  sended_invites Invite[] @relation("sender")
  received_invites  Invite[] @relation("receiver")
  
  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}


model Message {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  text          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  conversation  Conversation  @relation(fields: [conversationId],references: [id])
  conversationId  String
}

model Conversation {
  id            String    @id @default(cuid())
  groupMember   GroupMember[]
  messages      Message[]
}

model GroupMember {
  id    String    @id @default(cuid())
  user  User      @relation(fields: [userId], references: [id])
  userId String
  conversationId  String
  conversation  Conversation  @relation(fields: [conversationId], references: [id])
}


model Friendship {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  friends       Friend[]
}



model Friend {
  id            String    @id @default(cuid())
  friendShipId  String
  friendShip  Friendship  @relation(fields: [friendShipId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
  userId  String
}

model Invite {
  id            String    @id @default(cuid())
  sender        User      @relation(name: "sender", fields: [senderId], references: [id])
  senderId      String
  receiver      User      @relation(name: "receiver" ,fields: [receiverId], references: [id])
  receiverId    String
}
